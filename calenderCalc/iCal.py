# -*- coding: utf-8 -*-
import logging
from uuid import uuid4

import pytz
from icalendar import Calendar, Event
from datetime import datetime, timedelta
from pathlib import Path
import os


class iCal():
	def __init__(self):
		self._cal = Calendar()
		self.cal['prodid'] = '-//Pregnancy calendar product//Nadav Angel//EN'
		self.cal['version'] = '2.0'
		self.cal['summary'] = 'A Pregnancy calendar auto-generated by Python'
		self.now = datetime.now()
	
	@property
	def cal(self) -> Calendar:
		return self._cal
	
	def addEvent(self, date: datetime, name: str, description: str = ""):
		event = Event()
		event['uid'] = str(uuid4())
		event['name'] = name
		event['SUMMARY'] = name
		if description != "":
			event['description'] = description
		
		event['DTSTART;VALUE=DATE'] = date.strftime('%Y%m%d')#19970714T170000Z
		event['DTEND;VALUE=DATE'] = (date + timedelta(1)).strftime('%Y%m%d')
		event['DTSTAMP'] = self.now.strftime('%Y%m%dT%H%M%S%z') #19970714T170000Z
		event['CREATED'] = self.now.strftime('%Y%m%dT%H%M%S%z')
		event['LAST-MODIFIED'] = self.now.strftime('%Y%m%dT%H%M%S%z')
		event['X-MICROSOFT-CDO-BUSYSTATUS'] = 'FREE'

		self.cal.add_component(event)
		
	def writeFile(self, directory: Path, fileName: str):
		fullPath = os.path.join(directory, fileName + '.ics')
		with open(fullPath, 'wb') as f:
			f.write(self.cal.to_ical())
		return fullPath


class PregnancyICal():
	_cal: iCal
	_lmp: datetime | None
	_ovulationDate: datetime | None
	_allDays: bool
	_addTrimester: bool
	_skipWeeks: int
	NUM_DAYS_IN_WEEK: int = 7
	
	TRIMESTER_WEEKS_NUMBERS = [14, 28]
	
	def __init__(self, lastMonthlyPeriod: datetime | None = None):
		self._cal = iCal()
		self._lmp = None
		self._ovulationDate = None
		self._allDays = True
		self._addTrimester = True
		self._skipWeeks = 2
		if lastMonthlyPeriod is not None:
			self.lmp = lastMonthlyPeriod
	
	@property
	def lmp(self) -> datetime:
		return self._lmp
	
	@lmp.setter
	def lmp(self, value: datetime | None) -> None:
		self._lmp = value
		if value is not None:
			self._ovulationDate = self._lmp + timedelta(weeks=2)
	
	lastMonthlyPeriod = lmp
	
	@property
	def allDays(self) -> bool:
		return self._allDays
	
	@allDays.setter
	def allDays(self, value: bool) -> None:
		self._allDays = value
		
	@property
	def ovulationDate(self) -> datetime | None:
		return self._ovulationDate
	
	@ovulationDate.setter
	def ovulationDate(self, value: datetime) -> None:
		self.lmp = value - timedelta(weeks=2)
		
	def setByWeekNumber(self, weekNum: int) -> None:
		presentday = datetime.today()
		presentday = presentday.replace(hour=0, minute=0, second=0, microsecond=0)
		self.lmp = presentday - timedelta(weeks=weekNum)
		self._skipWeeks = weekNum # should we do this here?
		
	
	@property
	def addTrimester(self) -> bool:
		return self._addTrimester
	
	@addTrimester.setter
	def addTrimester(self, value: bool) -> None:
		self._addTrimester = value
	
	def write(self, directory: Path, fileName: str = 'PregnancyCalendar'):
		self.addEvents()
		return self._cal.writeFile(directory=directory, fileName=fileName)
	
	def addEvents(self):
		if self.lmp is None:
			raise ValueError(f'Missing last monthly period')
		
		if self.allDays:
			self._addAllDaysEvents()
		else:
			self._addFirstDayOfWeekEvents()
		
		if self.addTrimester:
			self._addTrimseterEvents()
			
		self._cal.addEvent(self.lmp + timedelta(280), 'Expected date!!')
			
	def _addAllDaysEvents(self):
		for day in range(self._skipWeeks * self.NUM_DAYS_IN_WEEK, 280):
			this_day = self.lmp + timedelta(day)
			week_num = int(day / self.NUM_DAYS_IN_WEEK)
			day_of_week = day % self.NUM_DAYS_IN_WEEK
			self._cal.addEvent(date=this_day, name = f'week {week_num} day {day_of_week}')
	
	def _addFirstDayOfWeekEvents(self):
		for day in range(self._skipWeeks * self.NUM_DAYS_IN_WEEK, 280, 7):
			this_day = self.lmp + timedelta(day)
			week_num = int(day / self.NUM_DAYS_IN_WEEK)
			self._cal.addEvent(date=this_day, name=f'week {week_num}')
	
	def _addTrimseterEvents(self):
		nth = {
			1: "First",
			2: "Second",
			3: "Third"
		}
		
		for i, trimesterWeekNum in enumerate(self.TRIMESTER_WEEKS_NUMBERS):
			this_day = self.lmp + timedelta(weeks=trimesterWeekNum)
			self._cal.addEvent(date=this_day, name=f'{nth[i+2]} Trimseter!')
	